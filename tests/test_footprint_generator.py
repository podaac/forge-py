"""Test cases for forge-py lambda_handler"""

import json
import os
import boto3
import pytest
from jsonschema import validate

from podaac.lambda_handler import lambda_handler
from moto import mock_aws
from mock import patch, Mock
import xarray as xr
from podaac.forge_py import forge
from shapely.wkt import dumps
from shapely import wkt

file_schema = {
  "type": "array",
  "items": {
    "additionalProperties": False,
    "type": "object",
    "required": [
      "bucket",
      "key"
    ],
    "properties": {
      "bucket": {
        "description": "Bucket where file is archived in S3",
        "type": "string"
      },
      "checksum": {
        "description": "Checksum value for file",
        "type": "string"
      },
      "checksumType": {
        "description": "Type of checksum (e.g. md5, sha256, etc)",
        "type": "string"
      },
      "fileName": {
        "description": "Name of file (e.g. file.txt)",
        "type": "string"
      },
      "key": {
        "description": "S3 Key for archived file",
        "type": "string"
      },
      "size": {
        "description": "Size of file (in bytes)",
        "type": "number"
      },
      "source": {
        "description": "Source URI of the file from origin system (e.g. S3, FTP, HTTP)",
        "type": "string"
      },
      "type": {
        "description": "Type of file (e.g. data, metadata, browse)",
        "type": "string"
      },
      "description": {
        "description": "variable values",
        "type": "string"
      }
    }
  }
}

polygon_shape = "POLYGON ((244.0514678955078125 -87.5967102050781250, 232.2517700195312500 -87.5616989135742188, 221.2293395996093750 -87.4293212890625000, 211.5938720703125000 -87.2135086059570312, 213.7142944335937500 -76.3264083862304688, 213.4763031005859375 -73.6018447875976562, 213.1922302246093750 -70.8764343261718750, 213.1704711914062500 -68.1530685424804688, 212.8024902343750000 -65.4255218505859375, 212.4246215820312500 -62.6941146850585938, 212.0415039062500000 -59.9752616882324219, 211.6510467529296875 -57.2456130981445312, 211.2525787353515625 -54.4969863891601562, 210.8473815917968750 -51.7729568481445312, 210.4379425048828125 -49.0490112304687500, 210.0203704833984375 -46.2986907958984375, 209.6033172607421875 -43.5652656555175781, 209.1771697998046875 -40.8472328186035156, 208.7435455322265625 -38.0919532775878906, 208.3087921142578125 -35.3561515808105469, 207.8626556396484375 -32.6254997253417969, 207.4073944091796875 -29.8786182403564453, 206.9446716308593750 -27.1338844299316406, 206.4770202636718750 -24.4067974090576172, 205.9975128173828125 -21.6511211395263672, 205.5058135986328125 -18.9066753387451172, 205.0132293701171875 -16.1816139221191406, 204.4935150146484375 -13.4320373535156250, 203.9712371826171875 -10.6928653717041016, 203.4326629638671875 -7.9730334281921387, 202.8823394775390625 -5.2321090698242188, 202.3118133544921875 -2.4863936901092529, 201.7238006591796875 0.2352480143308640, 201.1177825927734375 2.9613697528839111, 200.4867401123046875 5.6988544464111328, 199.8360137939453125 8.4003810882568359, 199.1626739501953125 11.1132020950317383, 198.4446105957031250 13.8491039276123047, 197.7111206054687500 16.5337924957275391, 196.9399108886718750 19.2289066314697266, 196.1130828857421875 21.9460334777832031, 195.2606201171875000 24.6051101684570312, 194.3536682128906250 27.2793464660644531, 193.3763580322265625 29.9624481201171875, 192.3529968261718750 32.5893592834472656, 191.2433929443359375 35.2435150146484375, 190.0454711914062500 37.8775978088378906, 188.7710571289062500 40.4657554626464844, 187.3614807128906250 43.0668640136718750, 185.8232269287109375 45.6368408203125000, 184.1528320312500000 48.1567649841308594, 182.2721405029296875 50.6826782226562500, 180.1853942871093750 53.1552429199218750, 177.8544616699218750 55.5749130249023438, 175.1858673095703125 57.9574432373046875, 172.2958984375000000 60.3195228576660156, 168.8144378662109375 62.5504608154296875, 164.7785339355468750 64.6783065795898438, 160.0745086669921875 66.6752929687500000, 154.5780181884765625 68.5054397583007812, 148.1708221435546875 70.1230239868164062, 140.7751007080078125 71.4727249145507812, 132.4080352783203125 72.4927902221679688, 123.2422180175781250 73.1236038208007812, 113.6305084228515625 73.3210754394531250, 104.0485763549804688 73.0701446533203125, 94.9633712768554688 72.3898391723632812, 86.7072982788085938 71.3269271850585938, 79.4317550659179688 69.9418869018554688, 73.1391906738281250 68.2960510253906250, 67.7443771362304688 66.4436798095703125, 63.1269836425781250 64.4292526245117188, 59.1633186340332031 62.2877273559570312, 55.7415313720703125 60.0459403991699219, 52.7664413452148438 57.7244148254394531, 50.1596336364746094 55.3387451171875000, 47.8574142456054688 52.9009399414062500, 45.8084411621093750 50.4202499389648438, 43.9712715148925781 47.9039268493652344, 42.3123855590820312 45.3576393127441406, 40.8453178405761719 42.6870040893554688, 39.4256248474121094 40.1924591064453125, 38.1572341918945312 37.5802116394042969, 36.9843025207519531 34.9516067504882812, 35.8942375183105469 32.3087005615234375, 34.8765144348144531 29.6532020568847656, 33.9222564697265625 26.9865760803222656, 33.0239257812500000 24.3100662231445312, 32.1751136779785156 21.6247596740722656, 31.3703289031982422 18.9316177368164062, 30.6048450469970703 16.2315025329589844, 29.8745498657226562 13.5251493453979492, 29.1758937835693359 10.8132524490356445, 28.5057582855224609 8.0964431762695312, 27.8614559173583984 5.3752970695495605, 27.2405548095703125 2.6503238677978516, 26.6409473419189453 -0.0779771953821182, 26.0607681274414062 -2.8091506958007812, 25.4983577728271484 -5.5427613258361816, 24.9522323608398438 -8.2784395217895508, 24.4210662841796875 -11.0158023834228516, 23.9036674499511719 -13.7545051574707031, 23.3990154266357422 -16.4942150115966797, 22.9061241149902344 -19.2346611022949219, 22.4241619110107422 -21.9755535125732422, 21.9523620605468750 -24.7166366577148438, 21.4900703430175781 -27.4576721191406250, 21.0366592407226562 -30.1984767913818359, 20.5916347503662109 -32.9388427734375000, 20.0799827575683594 -35.6747131347656250, 19.6391868591308594 -38.4250221252441406, 19.2057476043701172 -41.1751823425292969, 18.7836341857910156 -43.8877563476562500, 18.3620357513427734 -46.6386070251464844, 17.9558906555175781 -49.3757972717285156, 17.5422916412353516 -52.0958595275878906, 17.1350650787353516 -54.8384590148925781, 16.7440719604492188 -57.5726280212402344, 16.3531742095947266 -60.2898979187011719, 15.9648246765136719 -63.0297050476074219, 15.5885171890258789 -65.7621383666992188, 15.2421789169311523 -68.3950576782226562, 15.1946220397949219 -71.2035369873046875, 14.9149971008300781 -73.9288330078125000, 14.6842622756958008 -76.6532974243164062, 17.3964195251464844 -87.5390625000000000, 7.4107356071472168 -87.3207321166992188, 1.7686327695846558 -84.0569381713867188, 0.4344668090343475 -80.7673034667968750, 0.0120764160528779 -77.4676513671875000, 0.8801484107971191 -67.8379287719726562, 0.1250580847263336 -64.1846923828125000, 0.3084062933921814 -60.8627052307128906, 0.5435020327568054 -57.5186195373535156, 0.2411436587572098 -53.8709678649902344, 0.4636167287826538 -50.5484542846679688, 0.2059399485588074 -46.8678321838378906, 0.4483525454998016 -43.5420265197753906, 0.2243750542402267 -39.8777770996093750, 0.0206233989447355 -36.2190361022949219, 0.2137115299701691 -32.9084167480468750, 1.2590633630752563 -30.2304515838623047, 2.2181344032287598 -27.5710697174072266, 3.1233925819396973 -24.9093151092529297, 3.9953656196594238 -22.2070465087890625, 4.8075819015502930 -19.5151443481445312, 5.5783939361572266 -16.8278732299804688, 6.3242149353027344 -14.1026144027709961, 7.0244793891906738 -11.4054031372070312, 7.7085423469543457 -8.6893692016601562, 8.3643293380737305 -5.9500551223754883, 8.9868659973144531 -3.2502307891845703, 9.5824737548828125 -0.5177057385444641, 10.1669712066650391 2.2152268886566162, 10.7341194152832031 4.9506068229675293, 11.2854499816894531 7.6880278587341309, 11.8223409652709961 10.4271221160888672, 12.3460216522216797 13.1675367355346680, 12.8576555252075195 15.9089736938476562, 13.3582229614257812 18.6511325836181641, 13.8486957550048828 21.3937282562255859, 14.3299074172973633 24.1365013122558594, 14.8026771545410156 26.8792438507080078, 15.2677278518676758 29.6217384338378906, 15.8119173049926758 32.3849067687988281, 16.2626552581787109 35.1000251770019531, 16.7217998504638672 37.8489875793457031, 17.0640144348144531 40.5857429504394531, 17.5001754760742188 43.3245849609375000, 17.9323310852050781 46.0623550415039062, 18.3611011505126953 48.7990226745605469, 18.7870960235595703 51.5345268249511719, 19.2109889984130859 54.2688484191894531, 19.7845458984375000 57.0001907348632812, 20.0555915832519531 59.7339324951171875, 20.4782943725585938 62.4647521972656250, 20.9030475616455078 65.1944732666015625, 21.3318309783935547 67.9231491088867188, 21.7675533294677734 70.6508789062500000, 22.6817817687988281 76.1037979125976562, 23.1840152740478516 78.8291702270507812, 24.5038928985595703 84.2781448364257812, 25.8997364044189453 87.0014343261718750, 33.6062889099121094 86.7356262207031250, 46.2877235412597656 89.7059555053710938, 56.5670509338378906 84.8559265136718750, 72.8385772705078125 89.2566986083984375, 78.9373092651367188 88.7691802978515625, 81.5395278930664062 88.2754669189453125, 82.9647674560546875 87.7796325683593750, 83.8559112548828125 87.2827987670898438, 84.4604492187500000 86.7853775024414062, 105.9337463378906250 82.6518630981445312, 107.2414855957031250 83.1244735717773438, 108.7372894287109375 83.5931243896484375, 110.4632339477539062 84.0568847656250000, 112.4739837646484375 84.5145111083984375, 114.8413848876953125 84.9644012451171875, 117.6607437133789062 85.4042510986328125, 121.0590896606445312 85.8309173583984375, 125.2054748535156250 86.2399597167968750, 130.3200378417968750 86.6249923706054688, 136.6753845214843750 86.9768829345703125, 144.5668640136718750 87.2827911376953125, 154.2124786376953125 87.5256576538085938, 165.5476379394531250 87.6856307983398438, 177.9957733154296875 87.7450714111328125, 190.4996795654296875 87.6962890625000000, 201.9757080078125000 87.5458145141601562, 203.7243957519531250 84.8229141235351562, 204.5359344482421875 82.0988388061523438, 205.1315460205078125 79.3741836547851562, 205.6440582275390625 76.6489257812500000, 206.1164245605468750 73.9230041503906250, 206.5668487548828125 71.1963119506835938, 207.0044403076171875 68.4687728881835938, 207.4343261718750000 65.7402801513671875, 207.8597106933593750 63.0107765197753906, 208.2826995849609375 60.2801742553710938, 208.5493927001953125 57.5507240295410156, 208.9865417480468750 54.8209037780761719, 209.4243621826171875 52.0899009704589844, 209.8725128173828125 49.3450813293457031, 210.3108215332031250 46.6148300170898438, 210.7462463378906250 43.8870353698730469, 211.1897430419921875 41.1296882629394531, 211.6379699707031250 38.4042282104492188, 212.0846252441406250 35.6725692749023438, 212.5530853271484375 32.9107704162597656, 213.0099334716796875 30.1871833801269531, 213.4809265136718750 27.4468402862548828, 213.9585571289062500 24.6845874786376953, 214.4413452148437500 21.9625320434570312, 214.9351806640625000 19.2175712585449219, 215.4409027099609375 16.4536094665527344, 215.9511108398437500 13.7423162460327148, 216.4796752929687500 10.9933042526245117, 217.0221252441406250 8.2356748580932617, 217.5730285644531250 5.5277404785156250, 218.1422882080078125 2.7861676216125488, 218.7333831787109375 0.0305191650986671, 219.3355255126953125 -2.6748156547546387, 219.9607238769531250 -5.4037489891052246, 220.6175079345703125 -8.1503305435180664, 221.2916259765625000 -10.8775405883789062, 221.9844512939453125 -13.5626525878906250, 222.7215118408203125 -16.2879848480224609, 223.4857330322265625 -18.9795684814453125, 224.2843170166015625 -21.6673049926757812, 225.1421203613281250 -24.3719577789306641, 226.0329742431640625 -27.0395793914794922, 226.9814605712890625 -29.6996726989746094, 227.9964447021484375 -32.3730583190917969, 229.0899810791015625 -35.0094909667968750, 230.2555847167968750 -37.6424674987792969, 231.5153961181640625 -40.2620697021484375, 232.8921813964843750 -42.8592185974121094, 234.3981628417968750 -45.4486312866210938, 236.0451660156250000 -47.9878730773925781, 237.8704071044921875 -50.5089530944824219, 239.9216918945312500 -53.0050811767578125, 242.2097778320312500 -55.4474868774414062, 244.7924804687500000 -57.8369827270507812, 247.7605743408203125 -60.1686592102050781, 251.1916503906250000 -62.4273719787597656, 255.1142272949218750 -64.5700683593750000, 259.7443847656250000 -66.6018905639648438, 265.1836242675781250 -68.4721069335937500, 271.2907409667968750 -70.2195663452148438, 278.5610046386718750 -71.4353103637695312, 287.0123596191406250 -72.7074356079101562, 296.2593994140625000 -73.4009246826171875, 299.6226196289062500 -72.8790588378906250, 308.1889343261718750 -71.8702697753906250, 315.7457580566406250 -70.5236816406250000, 322.1054687500000000 -68.8161544799804688, 327.6463928222656250 -66.9971847534179688, 332.4612426757812500 -64.9797439575195312, 336.5159606933593750 -62.8628807067871094, 340.0235900878906250 -60.6344146728515625, 343.0789184570312500 -58.3024749755859375, 345.7392883300781250 -55.9293403625488281, 348.0916442871093750 -53.4902038574218750, 350.1774902343750000 -51.0121955871582031, 352.0422973632812500 -48.4987792968750000, 353.7304992675781250 -45.9474906921386719, 355.2588195800781250 -43.3749122619628906, 356.6504516601562500 -40.7921257019042969, 357.9408264160156250 -38.1648750305175781, 359.1130065917968750 -35.5440750122070312, 359.5647583007812500 -35.8981094360351562, 359.9879760742187500 -43.2024803161621094, 359.6653442382812500 -46.5298423767089844, 359.9140319824218750 -50.2117958068847656, 359.7169494628906250 -53.5557861328125000, 359.9299011230468750 -57.1868591308593750, 359.6719055175781250 -60.5316314697265625, 359.8847656250000000 -67.5046463012695312, 359.9857177734375000 -70.8489227294921875, 359.9226684570312500 -74.1610946655273438, 359.1441040039062500 -87.0336914062500000, 352.4543457031250000 -86.6957855224609375, 347.0701904296875000 -86.3209991455078125, 342.7181396484375000 -85.9194183349609375, 339.1676330566406250 -85.4982147216796875, 336.2385253906250000 -85.0624084472656250, 333.7938537597656250 -84.6155548095703125, 331.7309570312500000 -84.1601333618164062, 329.9718017578125000 -83.6980361938476562, 328.4571838378906250 -83.2306213378906250, 327.1416625976562500 -82.7589263916015625, 305.3377685546875000 -86.8312606811523438, 304.8058776855468750 -87.3290176391601562, 304.0463867187500000 -87.8264083862304688, 302.8590698242187500 -88.3231735229492188, 300.7074890136718750 -88.8186035156250000, 295.5320129394531250 -89.3100280761718750, 283.0847778320312500 -86.8312530517578125, 275.4898986816406250 -87.1307830810546875, 266.3387756347656250 -87.3696136474609375, 255.7011566162109375 -87.5301437377929688, 244.0514678955078125 -87.5967102050781250))"

@mock_aws
def test_lambda_handler_upload():
    """Test lambda handler function upload_file_to_s3 uploads files to s3"""

    bucket = "test-prefix-protected-test"
    aws_s3 = boto3.resource('s3', region_name='us-east-1')
    aws_s3.create_bucket(Bucket=bucket)

    footprint_generator = lambda_handler.FootprintGenerator(input={})

    test_dir = os.path.dirname(os.path.realpath(__file__))
    input_dir = f'{test_dir}/input'
    nc_file = f'{input_dir}/measures_esdr_scatsat_l2_wind_stress_23433_v1.1_s20210228-054653-e20210228-072612.nc'

    footprint_generator.upload_file_to_s3(nc_file, 's3://{}/{}'.format(bucket, os.path.basename(nc_file)))
    footprint_generator.clean_all()

    aws_s3.Object(bucket, os.path.basename(nc_file)).load()


@mock_aws
def test_get_config():
    """Test lambda handler function upload_file_to_s3 uploads files to s3"""
    aws_s3 = boto3.resource('s3', region_name='us-east-1')

    test_dir = os.path.dirname(os.path.realpath(__file__))
    config_dir = f'{test_dir}/configs'
    cfg_file = f'{config_dir}/PODAAC-CYGNS-C2H10.cfg'
    s3_client = boto3.client('s3', region_name='us-east-1')

    os.environ["CONFIG_BUCKET"] = "internal-bucket"
    os.environ["CONFIG_DIR"] = "dataset-config"
    aws_s3.create_bucket(Bucket='internal-bucket')

    with open(cfg_file, 'rb') as data:
        s3_client.put_object(Bucket='internal-bucket',
                         Key='dataset-config/JASON-1_L2_OST_GPN_E.cfg',
                         Body=data)

    footprint_generator = lambda_handler.FootprintGenerator(input={})
    footprint_generator.config = {
        'collection': {
            'name' : 'JASON-1_L2_OST_GPN_E'
        }
    }
    path = footprint_generator.get_config()    
    assert os.path.isfile(path)
    footprint_generator.clean_all()


@patch('requests.get')
def test_get_config_url(mocked_get):
    """Test lambda handler function upload_file_to_s3 uploads files to s3"""
    mocked_get.return_value = Mock(status_code=201, content=b'hello world')
    os.environ["CONFIG_URL"] = "https://hitide.podaac.sit.earthdatacloud.nasa.gov/dataset-configs"
    footprint_generator = lambda_handler.FootprintGenerator(input={})
    footprint_generator.config = {
        'collection': {
            'name' : 'MODIS_A-JPL-L2P-v2014.0'
        }
    }
    path = footprint_generator.get_config()    
    assert os.path.isfile(path)
    assert os.path.basename(path) == 'MODIS_A-JPL-L2P-v2014.0.cfg'

    with open(path, 'r') as f:
        content = f.read()
        assert 'hello world' == content

    footprint_generator.clean_all()


def test_get_config_no_setting():
    """Test lambda handler function upload_file_to_s3 uploads files to s3"""

    os.environ["CONFIG_BUCKET"] = ""
    os.environ["CONFIG_DIR"] = ""
    os.environ["CONFIG_URL"] = ""
    footprint_generator = lambda_handler.FootprintGenerator(input={})
    footprint_generator.config = {
        'collection': {
            'name' : 'MODIS_A-JPL-L2P-v2014.0'
        }
    }
    try:
        path = footprint_generator.get_config()    
        assert False
    except Exception:
        # exception expected
        pass

class Context:
    def __init__(self, aws_request_id):
        self.aws_request_id = aws_request_id

@mock_aws
@patch('requests.get')
def test_lambda_handler_cumulus(mocked_get):
    """Test lambda handler to run through cumulus handler"""

    test_dir = os.path.dirname(os.path.realpath(__file__))

    bucket = "test-prefix-protected-test"
    aws_s3 = boto3.resource('s3', region_name='us-east-1')
    aws_s3.create_bucket(Bucket=bucket)

    input_dir = f'{test_dir}/input'
    config_dir = f'{test_dir}/configs'
    nc_file = f'{input_dir}/measures_esdr_scatsat_l2_wind_stress_23433_v1.1_s20210228-054653-e20210228-072612.nc'
    config_file = f'{input_dir}/SCATSAT1_ESDR_L2_WIND_STRESS_V1.1.cfg'

    with open(nc_file, 'rb') as data:
        aws_s3.Bucket(bucket).put_object(Key='test_folder/test_granule.nc', Body=data)

    s3_client = boto3.client('s3', region_name='us-east-1')    

    # Mock S3 download here:
    os.environ["CONFIG_BUCKET"] = "internal-bucket"
    os.environ["CONFIG_DIR"] = "dataset-config"
    os.environ["CONFIG_URL"] = ""
    os.environ["FOOTPRINT_OUTPUT_BUCKET"] = "internal-bucket"
    os.environ["FOOTPRINT_OUTPUT_DIR"] = "test"

    aws_s3.create_bucket(Bucket='internal-bucket')

    with open(config_file, 'rb') as data:
        s3_client.put_object(Bucket='internal-bucket',
                         Key='dataset-config/JASON-1_L2_OST_GPN_E.cfg',
                         Body=data)

    s3_client.get_object(Bucket="internal-bucket",
                         Key='dataset-config/JASON-1_L2_OST_GPN_E.cfg',
                         )

    dir_path = os.path.dirname(os.path.realpath(__file__))
    input_file = dir_path + '/input.txt'

    with open(input_file) as json_event:
        event = json.load(json_event)
        granules = event.get('payload').get('granules')
        for granule in granules:
            files = granule.get('files')
            is_valid_shema = validate(instance=files, schema=file_schema)
            assert is_valid_shema is None

    context = Context("fake_request_id")
    output = lambda_handler.handler(event, context)

    generated_footprint = False
    for granule in output.get('payload').get('granules'):
        is_valid_shema = validate(instance=granule.get('files'), schema=file_schema)
        assert is_valid_shema is None  
        for file in granule.get('files'):

            if file.get('fileName').endswith('.fp'):
                bucket = file.get('bucket')
                key = file.get('key')
                # test if file in s3 if not then test fails
                results = aws_s3.Object(bucket, key).load()
                generated_footprint = True
    assert generated_footprint


def compare_shapes_similarity(wkt1, wkt2, tolerance=0.3):
    """
    Compares two WKT shapes and returns True if they are similar within a given tolerance, False otherwise.
    
    Parameters:
    wkt1 (str): Well-Known Text (WKT) representation of the first shape.
    wkt2 (str): Well-Known Text (WKT) representation of the second shape.
    tolerance (float): The maximum Hausdorff Distance for the shapes to be considered similar.
    
    Returns:
    bool: True if the shapes are similar within the tolerance, False otherwise.
    """
    # Convert WKT to Shapely geometries
    shape1 = wkt.loads(wkt1)
    shape2 = wkt.loads(wkt2)
    
    # Calculate the Hausdorff Distance
    hausdorff_distance = shape1.hausdorff_distance(shape2)
    
    # Check if the Hausdorff Distance is within the tolerance
    return hausdorff_distance <= tolerance   


def test_forge_py():

    test_dir = os.path.dirname(os.path.realpath(__file__))
    input_dir = f'{test_dir}/input'
    nc_file = f'{input_dir}/measures_esdr_scatsat_l2_wind_stress_23433_v1.1_s20210228-054653-e20210228-072612.nc'
    config_file = f'{input_dir}/SCATSAT1_ESDR_L2_WIND_STRESS_V1.1.cfg'
    result_file = f'{test_dir}/results/footprint_result.txt'

    with open(result_file, "r") as file:
        polygon_shape = file.read()

    strategy, footprint_params = forge.load_footprint_config(config_file)

    # Generate footprint
    with xr.open_dataset(nc_file, decode_times=False) as ds:
        lon_data = ds[footprint_params['longitude_var']]
        lat_data = ds[footprint_params['latitude_var']]

        wkt_alphashape = forge.generate_footprint(
            lon_data, lat_data, strategy=strategy, **footprint_params
        )
        assert compare_shapes_similarity(wkt_alphashape, polygon_shape)


def test_forge_py_bin_avg():

    test_dir = os.path.dirname(os.path.realpath(__file__))
    input_dir = f'{test_dir}/input'
    nc_file = f'{input_dir}/measures_esdr_scatsat_l2_wind_stress_23433_v1.1_s20210228-054653-e20210228-072612.nc'
    config_file = f'{input_dir}/SCATSAT1_ESDR_L2_WIND_STRESS_V1.1_bin_avg.cfg'
    result_file = f'{test_dir}/results/footprint_result_bin_avg.txt'

    with open(result_file, "r") as file:
        polygon_shape = file.read()

    strategy, footprint_params = forge.load_footprint_config(config_file)

    # Generate footprint
    with xr.open_dataset(nc_file, decode_times=False) as ds:
        lon_data = ds[footprint_params['longitude_var']]
        lat_data = ds[footprint_params['latitude_var']]

        wkt_alphashape = forge.generate_footprint(
            lon_data, lat_data, strategy=strategy, **footprint_params
        )
        assert compare_shapes_similarity(wkt_alphashape, polygon_shape)


def test_forge_py_open_cv():

    test_dir = os.path.dirname(os.path.realpath(__file__))
    input_dir = f'{test_dir}/input'
    nc_file = f'{input_dir}/measures_esdr_scatsat_l2_wind_stress_23433_v1.1_s20210228-054653-e20210228-072612.nc'
    config_file = f'{input_dir}/SCATSAT1_ESDR_L2_WIND_STRESS_V1.1_open_cv.cfg'
    result_file = f'{test_dir}/results/footprint_result_open_cv.txt'

    with open(result_file, "r") as file:
        polygon_shape = file.read()

    strategy, footprint_params = forge.load_footprint_config(config_file)
    footprint_params["path"] = test_dir
    with xr.open_dataset(nc_file, decode_times=False) as ds:
        lon_data = ds[footprint_params['longitude_var']]
        lat_data = ds[footprint_params['latitude_var']]

        wkt_alphashape = forge.generate_footprint(
            lon_data, lat_data, strategy=strategy, **footprint_params
        )
        print(wkt_alphashape)
        assert compare_shapes_similarity(wkt_alphashape, polygon_shape)
